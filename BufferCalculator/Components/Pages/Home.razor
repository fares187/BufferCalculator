@page "/"
@inject IJSRuntime JS
@*<h1>Hello, world!</h1>

Welcome to your new app.
 <div id="container3D"></div>

<script src="js/main.js" type="module"></script> *@

@using BufferCalculator.Model
@using System.ComponentModel
@using System.Diagnostics
@using BufferCalculator.extentions

<div class="main-container">

    <div class="left-panel d-flex flex-column align-content-center align-items-center flex-wrap justify-content-center">


        <div class="chemical-card">
            <h3>@SelectedCompound?.Name</h3>
            <p><strong>Formula:</strong> @SelectedCompound?.Formula</p>
            <p><strong>Molar Mass:</strong> @SelectedCompound?.MolarMass</p>
        </div>
        <div class="chemical-card">
            <h4>Common Uses</h4>
            <p>@SelectedCompound?.Uses</p>
        </div>

    </div>
    <div id="experience" class="image-container @(isLoading ? "transitioning" : "")">
        @*  <img src="@("images/" +SelectedCompound?.ImageUrl)" alt="@SelectedCompound?.Name structure" /> *@
        @*         <img src="images/Sodium-Citrate.png" /> *@

        @if (isLoading)
        {
            <div class="loading-spinner">
                <div class="spinner"></div>
                <div class="loading-text">Loading Model...</div>
            </div>
        }
        <canvas @ref="threeCanvas" id="threeCanvas"></canvas>
    </div>

    <div class="right-panel d-flex flex-column align-content-center align-items-center flex-wrap justify-content-center"
    @onkeydown="HandleKeyDown" tabindex="0" @ref="rightPanel">
        @foreach (var compound in OrderedCompounds)
        {
            <div class="compound-item @(compound == SelectedCompound ? "selected" : "")"
            style="opacity: @compound.Opacity;
            transform: scale(@compound.Scale);"
            @onclick="() => SelectCompound(compound)">
                @compound.Name
            </div>
        }
    </div>
</div>
@* <script src="js/three-init.js" type="module"></script> *@
@code {
    public List<ChemicalCompound> compounds = new();
    public ChemicalCompound SelectedCompound;
    public int selectedIndex = 0;


    private ElementReference rightPanel;


    private CancellationTokenSource? _navigationCts;
    private bool _isTransitioning;



    private ElementReference threeCanvas;
    private IJSObjectReference? threeModule;
    private IJSObjectReference? threeInstance;
    private DotNetObjectReference<Home>? dotNetInstance;
    private bool isLoading = true;

    [JSInvokable("HandleResize")] // Explicitly specify the identifier
    public async Task HandleWindowResize() // Method name can be different
    {
        if (threeInstance != null)
        {
            var width = await JS.InvokeAsync<double>("getContainerWidth", ".image-container");
            var height = await JS.InvokeAsync<double>("getContainerHeight", ".image-container");
            await threeInstance.InvokeVoidAsync("resize", width, height);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (threeInstance != null)
        {
            await threeInstance.InvokeVoidAsync("dispose");
            await threeInstance.DisposeAsync();
        }
        dotNetInstance?.Dispose();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            isLoading = true;
            StateHasChanged(); // Force UI update to show loading

            try
            {

             //   await JS.InvokeVoidAsync("eval", "typeof THREE !== 'undefined'");
                threeModule = await JS.InvokeAsync<IJSObjectReference>(
                    "import", "./js/threejsInterop.js");

                var width = await JS.InvokeAsync<double>("getContainerWidth", ".image-container");
                var height = await JS.InvokeAsync<double>("getContainerHeight", ".image-container");

                threeInstance = await threeModule.InvokeAsync<IJSObjectReference>(
                    "initThreeJS", threeCanvas, width, height);

                dotNetInstance = DotNetObjectReference.Create(this);
                await JS.InvokeVoidAsync("registerResizeHandler", dotNetInstance);

                Navigate(1);
                await JS.InvokeVoidAsync("registerGlobalKeys",
              DotNetObjectReference.Create(this));

                // selectedIndex = (selectedIndex + 1 + compounds.Count) % compounds.Count;
                // SelectedCompound = compounds[selectedIndex];
                // UpdateCompoundsPosition();
                // await threeInstance.InvokeVoidAsync("initialloadModel", SelectedCompound.ImageUrl);
                //   await HandleModelChange(SelectedCompound.ModelUrl); // Trigger model transition

            }
            finally
            {
                isLoading = false;
                StateHasChanged(); // Update UI to hide loading
                // Navigate(1);
            }
        }

    }
    private async Task HandleModelChange(string modelUrl)
    {
        // Cancel previous navigation
        _navigationCts?.Cancel();
        _navigationCts = new CancellationTokenSource();

        try
        {
            _isTransitioning = true;
            if (threeInstance != null)
            {
                await threeInstance.InvokeVoidAsync("transitionModels", modelUrl)
                    .AsTask()
                    .WithCancellation(_navigationCts.Token); 
            }
        }
        catch (TaskCanceledException)
        {
            // Transition was cancelled intentionally
        }
        finally
        {
            _isTransitioning = false;
        }
    }
    protected override async Task OnInitializedAsync()
    {

        base.OnInitialized();
        // Initialize your compounds with actual data
        compounds = new List<ChemicalCompound>
        {
            new ChemicalCompound
            {
                Name = "Sodium Phosphate",
                Formula = "Na₃PO₄",
                MolarMass = "163.94 g/mol",
                Uses = "Food additive, detergent, water treatment",
                ImageUrl = "Sodium-Citrate.png",
                ModelUrl="SodiumPhosphate.glb"
            },
             new ChemicalCompound
            {
                Name = "Sodium Citrate",
                Formula = "Na₃PO₄",
                MolarMass = "163.94 g/mol",
                Uses = "Food additive, detergent, water treatment",
                ImageUrl = "Sodium-Citrate.png",
                ModelUrl="SodiumCitrate.glb"
            },
             new ChemicalCompound
            {
                Name = "Sodium Formate",
                Formula = "Na₃PO₄",
                MolarMass = "163.94 g/mol",
                Uses = "Food additive, detergent, water treatment",
                ImageUrl = "Sodium-Citrate.png",
                ModelUrl="SodiumFormate.glb"
            },

            // Add other compounds similarly
        };
        compounds = compounds.OrderBy(c => c.RelativePosition).ToList();
        UpdateCompoundsPosition();
        // SelectedCompound = compounds.OrderBy(c => c.RelativePosition).First();

    }


    // private void HandleKeyPress(object sender, KeyPressedEventArgs e)
    // {
    //     Debug.WriteLine("---------------->" + e.Key);
    //     switch (e.Key.ToUpper())
    //     {
    //         case "UP" or "DPAD_UP":
    //             Navigate(-1);
    //             break;
    //         case "DOWN" or "DPAD_DOWN":
    //             Navigate(1);
    //             break;
    //     }
    //     StateHasChanged();
    // }
    private IEnumerable<ChemicalCompound> OrderedCompounds =>
        compounds.OrderBy(c => c.RelativePosition);

    private void UpdateCompoundsPosition()
    {
        for (int i = 0; i < compounds.Count; i++)
        {
            var position = i - selectedIndex;
            if (position > compounds.Count / 2) position -= compounds.Count;
            if (position < -compounds.Count / 2) position += compounds.Count;

            compounds[i].RelativePosition = position;
            compounds[i].Opacity = Math.Max(0.2, 1 - Math.Abs(position) * 0.3);
            // Add scale calculation (range: 0.5 - 1)
            compounds[i].Scale = Math.Max(0.5, 1 - Math.Abs(position) * 0.15);
        }
    }

    private async void SelectCompound(ChemicalCompound compound)
    {
        selectedIndex = compounds.IndexOf(compound);
        SelectedCompound = compound;
        UpdateCompoundsPosition();
        await HandleModelChange(compound.ModelUrl); // Trigger model transition
    }

    [JSInvokable]
    public void HandleGlobalKey(int keyCode)
    {
        if (keyCode == 38) Navigate(-1); // Up arrow
        if (keyCode == 40) Navigate(1);  // Down arrow
    }
    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "ArrowUp") {
            Navigate(-1);
            Debug.WriteLine("-------------------->up");
        }
        ;
        if (e.Key == "ArrowDown") Navigate(1);
    }

    private void Navigate(int direction)
    {
        if (_isTransitioning) return;

        selectedIndex = (selectedIndex + direction + compounds.Count) % compounds.Count;
        SelectedCompound = compounds[selectedIndex];
        UpdateCompoundsPosition();
        _ = HandleModelChange(SelectedCompound.ModelUrl);
        StateHasChanged();
    }
    public void Dispose()
    {
        JS.InvokeVoidAsync("unregisterKeyboardNavigation");
        JS.InvokeVoidAsync("unregisterGlobalKeys");
        _navigationCts?.Cancel();
      
    }
}

<style>
   
    .loading-spinner {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        text-align: center;
        z-index: 100;
    }

    .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid #f3f3f3;
        border-top: 4px solid #007bff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto;
    }

    .loading-text {
        margin-top: 10px;
        color: #007bff;
        font-weight: 500;
    }

    keyframes spin {
        0%

    {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }

    }

    /* .main-container {
                display: grid;
                grid-template-columns: 60% 40%;
                height: 100dvh;
                font-family: 'Roboto', sans-serif;
                background: white;
            } */

    /*  .left-panel {
                padding: 20px;
            } */

    /*  .image-container img {
                width: 100%;
                max-height: 400px;
                object-fit: contain;
            } */

    .card-container {
        display: grid;
        gap: 20px;
        margin-top: 20px;
    }

    /*   .chemical-card {
                background: #f8f9fa;
                padding: 20px;
                border-radius: 10px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }

            .right-panel {
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                gap: 10px;
                padding: 20px;
                background: #f8f9fa;
                outline: none;
                }*/

    /*  .compound-item {
                padding: 15px 20px;
                margin: 5px 0;
                width: 80%;
                text-align: center;
                border-radius: 8px;
                cursor: pointer;
                transition: all 0.3s ease;
                transform-origin: center;
            }

                .compound-item.selected {
                    background: #007bff;
                    color: white;
                    /* transform: scale(1.05);
                } */


    .canvas-container {
        transition: opacity 0.3s ease;
    }

    .transitioning {
        opacity: 0.5;
        pointer-events: none;
    }

    .main-container {
        display: grid;
        grid-template-columns: 1fr 3fr 1fr; /* 20% | 60% | 20% */
        height: 100vh;
        font-family: 'Roboto', sans-serif;
        background: white;
        gap: 20px;
        padding: 20px;
    }

    .left-panel {
        display: flex;
        flex-direction: column;
        gap: 15px;
        padding-right: 20px;
    }

    /*  .image-container {
            grid-column: 2;
            display: flex;
            align-items: center;
            justify-content: center;
            background: #f8f9fa;
            border-radius: 12px;
            padding: 15px;
        }

            .image-container img {
                width: 100%;
                height: 100%;
                max-height: 70vh;
                object-fit: contain;
            } */

    .image-container {
        width: 100%;
        height: 100%;
        position: relative;
        overflow: hidden;
    }

    #threeCanvas {
        width: 100% !important;
        height: 100% !important;
        display: block;
    }

    .chemical-card {
        background: #f8f9fa;
        padding: 15px;
        border-radius: 8px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        font-size: 0.9em;
    }

        .chemical-card h3 {
            margin: 0 0 10px 0;
            font-size: 1.2em;
            color: #2c3e50;
        }

        .chemical-card p {
            margin: 8px 0;
            font-size: 0.95em;
            line-height: 1.4;
        }

    .right-panel {
        display: flex;
        flex-direction: column;
        gap: 8px;
        padding-left: 20px;
    }

    .compound-item {
        padding: 12px 15px;
        margin: 3px 0;
        width: 100%;
        font-size: 0.9em;
        border-radius: 6px;
        background: #f8f9fa;
        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    }

        .compound-item.selected {
            background: #007bff;
            color: white;
            transform: scale(1) !important;
            font-weight: 500;
        }

        /* Compact hover effect */
        .compound-item:not(.selected):hover {
            transform: scale(1.02);
            background: #e9ecef;
        }

        .compound-item:hover {
            background: #e9ecef;
        }

    .compound-item {
        transition: transform 0.1s ease, opacity 0.1s ease;
    }

        .compound-item:active {
            transform: scale(0.95);
        }
</style>
